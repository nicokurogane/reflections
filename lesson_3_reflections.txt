When do you want to create a remote repository rather than keeping all your work local?

- When i start a new project or get a project to mantain it 
  so i can keep track of changes.

- When i see fit to keep a backup of documents and they will change
  every now and then.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

to stay up-to-date with meaningful changes in the local repository


Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

 forks copy a repository in github to your github account. clone copies
a repository indcate to your local computer and branches creates a commit 
but it's not public to the master branch.

You want to fork when you want a copy of a repository on your github.
you want to clone when you want a copy of a repository where you can
commit changes on your computer and you want to create a branch when
you want a commit to be present but not visible on the master branch. 


What is the benefit of having a copy of the last known state of the remote
stored locally?

    you can check if the master branch in your github repository
    have been update if you were disconnected a while, and
    if that was the case, then you can check if any important file
    has been altered.	



How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

   using a tool called win-merge to see the changes and merge between 
   files. making sure everybody  has an up-to-date proyect.
  
   it would make VERY hard to do, since i think one person must
   do all the job to keep the proyect updated. and if a bad merge
   happens, it would mean double the effort to keep the changes
   coherently.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

i want to make the changes in a separate branch when im working
on a new feature but i don't want to commits those changes
for new collaborators, so i don't mix things up.

i can give us the freedom to experiment our ideas on working
code without the fear of breaking it down and having to repair
it to a previous state. 